'use strict'

const mongoose = require('mongoose')

require('../customTypes/uint12.js')(mongoose)
require('../customTypes/uint10.js')(mongoose)
require('../customTypes/formats.js')(mongoose)

const DeviceSchema = new mongoose.Schema({
    'name': { type: String, required: true },
    'os': { type: String, required: true, enum: ['Windows', 'Linux', 'Android'] },
    'deviceId': { type: Number, required: true },
    'vendorId': { type: Number, required: true },
    'driverVersion': { type: Number, required: true },
    'vulkanInfo': {
        'properties': {
            'apiVersion': {
                'major': { type: mongoose.Schema.Types.Uint10, required: true },
                'minor': { type: mongoose.Schema.Types.Uint10, required: true },
                'patch': { type: mongoose.Schema.Types.Uint12, required: true },
            },
            'driverVersion': { type: Number, required: true },
            'vendorID': { type: Number, required: true },
            'deviceID': { type: Number, required: true },
            'deviceName': { type: String, required: true },
            'deviceType': { type: String, required: true },
            'pipelineCacheUUID': { type: [Number], required: true },
            'limits': {
                'maxImageDimension1D': { type: Number, required: true },
                'maxImageDimension2D': { type: Number, required: true },
                'maxImageDimension3D': { type: Number, required: true },
                'maxImageDimensionCube': { type: Number, required: true },
                'maxImageArrayLayers': { type: Number, required: true },
                'maxTexelBufferElements': { type: Number, required: true },
                'maxUniformBufferRange': { type: Number, required: true },
                'maxStorageBufferRange': { type: Number, required: true },
                'maxPushConstantsSize': { type: Number, required: true },
                'maxMemoryAllocationCount': { type: Number, required: true },
                'maxSamplerAllocationCount': { type: Number, required: true },
                'bufferImageGranularity': { type: Number, required: true },
                'sparseAddressSpaceSize': { type: Number, required: true },
                'maxBoundDescriptorSets': { type: Number, required: true },
                'maxPerStageDescriptorSamplers': { type: Number, required: true },
                'maxPerStageDescriptorUniformBuffers': { type: Number, required: true },
                'maxPerStageDescriptorStorageBuffers': { type: Number, required: true },
                'maxPerStageDescriptorSampledImages': { type: Number, required: true },
                'maxPerStageDescriptorStorageImages': { type: Number, required: true },
                'maxPerStageDescriptorInputAttachments': { type: Number, required: true },
                'maxPerStageResources': { type: Number, required: true },
                'maxDescriptorSetSamplers': { type: Number, required: true },
                'maxDescriptorSetUniformBuffers': { type: Number, required: true },
                'maxDescriptorSetUniformBuffersDynamic': { type: Number, required: true },
                'maxDescriptorSetStorageBuffers': { type: Number, required: true },
                'maxDescriptorSetStorageBuffersDynamic': { type: Number, required: true },
                'maxDescriptorSetSampledImages': { type: Number, required: true },
                'maxDescriptorSetStorageImages': { type: Number, required: true },
                'maxDescriptorSetInputAttachments': { type: Number, required: true },
                'maxVertexInputAttributes': { type: Number, required: true },
                'maxVertexInputBindings': { type: Number, required: true },
                'maxVertexInputAttributeOffset': { type: Number, required: true },
                'maxVertexInputBindingStride': { type: Number, required: true },
                'maxVertexOutputComponents': { type: Number, required: true },
                'maxTessellationGenerationLevel': { type: Number, required: true },
                'maxTessellationPatchSize': { type: Number, required: true },
                'maxTessellationControlPerVertexInputComponents': { type: Number, required: true },
                'maxTessellationControlPerVertexOutputComponents': { type: Number, required: true },
                'maxTessellationControlPerPatchOutputComponents': { type: Number, required: true },
                'maxTessellationControlTotalOutputComponents': { type: Number, required: true },
                'maxTessellationEvaluationInputComponents': { type: Number, required: true },
                'maxTessellationEvaluationOutputComponents': { type: Number, required: true },
                'maxGeometryShaderInvocations': { type: Number, required: true },
                'maxGeometryInputComponents': { type: Number, required: true },
                'maxGeometryOutputComponents': { type: Number, required: true },
                'maxGeometryOutputVertices': { type: Number, required: true },
                'maxGeometryTotalOutputComponents': { type: Number, required: true },
                'maxFragmentInputComponents': { type: Number, required: true },
                'maxFragmentOutputAttachments': { type: Number, required: true },
                'maxFragmentDualSrcAttachments': { type: Number, required: true },
                'maxFragmentCombinedOutputResources': { type: Number, required: true },
                'maxComputeSharedMemorySize': { type: Number, required: true },
                'maxComputeWorkGroupCount': { type: [Number], required: true },
                'maxComputeWorkGroupInvocations': { type: Number, required: true },
                'maxComputeWorkGroupSize': { type: [Number], required: true },
                'subPixelPrecisionBits': { type: Number, required: true },
                'subTexelPrecisionBits': { type: Number, required: true },
                'mipmapPrecisionBits': { type: Number, required: true },
                'maxDrawIndexedIndexValue': { type: Number, required: true },
                'maxDrawIndirectCount': { type: Number, required: true },
                'maxSamplerLodBias': { type: Number, required: true },
                'maxSamplerAnisotropy': { type: Number, required: true },
                'maxViewports': { type: Number, required: true },
                'maxViewportDimensions': { type: [Number], required: true },
                'viewportBoundsRange': { type: [Number], required: true },
                'viewportSubPixelBits': { type: Number, required: true },
                'minMemoryMapAlignment': { type: Number, required: true },
                'minTexelBufferOffsetAlignment': { type: Number, required: true },
                'minUniformBufferOffsetAlignment': { type: Number, required: true },
                'minStorageBufferOffsetAlignment': { type: Number, required: true },
                'minTexelOffset': { type: Number, required: true },
                'maxTexelOffset': { type: Number, required: true },
                'minTexelGatherOffset': { type: Number, required: true },
                'maxTexelGatherOffset': { type: Number, required: true },
                'minInterpolationOffset': { type: Number, required: true },
                'maxInterpolationOffset': { type: Number, required: true },
                'subPixelInterpolationOffsetBits': { type: Number, required: true },
                'maxFramebufferWidth': { type: Number, required: true },
                'maxFramebufferHeight': { type: Number, required: true },
                'maxFramebufferLayers': { type: Number, required: true },
                'framebufferColorSampleCounts': { type: [String], required: true },
                'framebufferDepthSampleCounts': { type: [String], required: true },
                'framebufferStencilSampleCounts': { type: [String], required: true },
                'framebufferNoAttachmentsSampleCounts': { type: [String], required: true },
                'maxColorAttachments': { type: Number, required: true },
                'sampledImageColorSampleCounts': { type: [String], required: true },
                'sampledImageIntegerSampleCounts': { type: [String], required: true },
                'sampledImageDepthSampleCounts': { type: [String], required: true },
                'sampledImageStencilSampleCounts': { type: [String], required: true },
                'storageImageSampleCounts': { type: [String], required: true },
                'maxSampleMaskWords': { type: Number, required: true },
                'timestampComputeAndGraphics': { type: Boolean, required: true },
                'timestampPeriod': { type: Number, required: true },
                'maxClipDistances': { type: Number, required: true },
                'maxCullDistances': { type: Number, required: true },
                'maxCombinedClipAndCullDistances': { type: Number, required: true },
                'discreteQueuePriorities': { type: Number, required: true },
                'pointSizeRange': { type: [Number], required: true },
                'lineWidthRange': { type: [Number], required: true },
                'pointSizeGranularity': { type: Number, required: true },
                'lineWidthGranularity': { type: Number, required: true },
                'strictLines': { type: Boolean, required: true },
                'standardSampleLocations': { type: Boolean, required: true },
                'optimalBufferCopyOffsetAlignment': { type: Number, required: true },
                'optimalBufferCopyRowPitchAlignment': { type: Number, required: true },
                'nonCoherentAtomSize': { type: Number, required: true },
            },
            'sparseProperties': {
                'residencyStandard2DBlockShape': { type: Boolean, required: true },
                'residencyStandard2DMultisampleBlockShape': { type: Boolean, required: true },
                'residencyStandard3DBlockShape': { type: Boolean, required: true },
                'residencyAlignedMipSize': { type: Boolean, required: true },
                'residencyNonResidentStrict': { type: Boolean, required: true },
            },
        },
        'features': {
            'robustBufferAccess': { type: Boolean, required: true },
            'fullDrawIndexUint32': { type: Boolean, required: true },
            'imageCubeArray': { type: Boolean, required: true },
            'independentBlend': { type: Boolean, required: true },
            'geometryShader': { type: Boolean, required: true },
            'tessellationShader': { type: Boolean, required: true },
            'sampleRateShading': { type: Boolean, required: true },
            'dualSrcBlend': { type: Boolean, required: true },
            'logicOp': { type: Boolean, required: true },
            'multiDrawIndirect': { type: Boolean, required: true },
            'drawIndirectFirstInstance': { type: Boolean, required: true },
            'depthClamp': { type: Boolean, required: true },
            'depthBiasClamp': { type: Boolean, required: true },
            'fillModeNonSolid': { type: Boolean, required: true },
            'depthBounds': { type: Boolean, required: true },
            'wideLines': { type: Boolean, required: true },
            'largePoints': { type: Boolean, required: true },
            'alphaToOne': { type: Boolean, required: true },
            'multiViewport': { type: Boolean, required: true },
            'samplerAnisotropy': { type: Boolean, required: true },
            'textureCompressionETC2': { type: Boolean, required: true },
            'textureCompressionASTC_LDR': { type: Boolean, required: true },
            'textureCompressionBC': { type: Boolean, required: true },
            'occlusionQueryPrecise': { type: Boolean, required: true },
            'pipelineStatisticsQuery': { type: Boolean, required: true },
            'vertexPipelineStoresAndAtomics': { type: Boolean, required: true },
            'fragmentStoresAndAtomics': { type: Boolean, required: true },
            'shaderTessellationAndGeometryPointSize': { type: Boolean, required: true },
            'shaderImageGatherExtended': { type: Boolean, required: true },
            'shaderStorageImageExtendedFormats': { type: Boolean, required: true },
            'shaderStorageImageMultisample': { type: Boolean, required: true },
            'shaderStorageImageReadWithoutFormat': { type: Boolean, required: true },
            'shaderStorageImageWriteWithoutFormat': { type: Boolean, required: true },
            'shaderUniformBufferArrayDynamicIndexing': { type: Boolean, required: true },
            'shaderSampledImageArrayDynamicIndexing': { type: Boolean, required: true },
            'shaderStorageBufferArrayDynamicIndexing': { type: Boolean, required: true },
            'shaderStorageImageArrayDynamicIndexing': { type: Boolean, required: true },
            'shaderClipDistance': { type: Boolean, required: true },
            'shaderCullDistance': { type: Boolean, required: true },
            'shaderFloat64': { type: Boolean, required: true },
            'shaderInt64': { type: Boolean, required: true },
            'shaderInt16': { type: Boolean, required: true },
            'shaderResourceResidency': { type: Boolean, required: true },
            'shaderResourceMinLod': { type: Boolean, required: true },
            'sparseBinding': { type: Boolean, required: true },
            'sparseResidencyBuffer': { type: Boolean, required: true },
            'sparseResidencyImage2D': { type: Boolean, required: true },
            'sparseResidencyImage3D': { type: Boolean, required: true },
            'sparseResidency2Samples': { type: Boolean, required: true },
            'sparseResidency4Samples': { type: Boolean, required: true },
            'sparseResidency8Samples': { type: Boolean, required: true },
            'sparseResidency16Samples': { type: Boolean, required: true },
            'sparseResidencyAliased': { type: Boolean, required: true },
            'variableMultisampleRate': { type: Boolean, required: true },
            'inheritedQueries': { type: Boolean, required: true },
        },
        'memory': {
            'memoryTypes': [{
                'heapIndex': Number,
                'propertyFlags': [String],
            }],
            'memoryHeaps': [{
                'heapIndex': Number,
                'propertyFlags': [String],
            }],
        },
        'queues': [{
            'minImageTransferGranularity': {
                'depth': { type: Number, required: true },
                'height': { type: Number, required: true },
                'width': { type: Number, required: true },
            },
            'queueCount': { type: Number, required: true },
            'queueFlags': { type: [String], required: true },
            'timestampValidBits': { type: Number, required: true },
        }],
        'swapchain': {
            'maxImageArrayLayers': Number,
            'minImageCount': Number,
            'maxImageCount': Number,
            'formats': [String],
            'presentModes': [String],
            'supportedTransforms': [String],
            'supportedCompositeAlpha': [String],
            'supportedUsageFlags': [String],
            'surfaceExtension': String,
        },
        'extensions': [{
            'extensionName': { type: String, required: true },
            'specVersion': { type: Number, required: true },
        }],
        'formats': { type: [mongoose.Schema.Types.Formats], required: true },
    },
}, {
    versionKey: false,
})

DeviceSchema.index({
    'name': 1,
    'os': 1,
    'deviceId': 1,
    'vendorId': 1,
    'driverVersion': 1,
}, { unique: true })

const Device = mongoose.model('Device', DeviceSchema)
module.exports = Device
